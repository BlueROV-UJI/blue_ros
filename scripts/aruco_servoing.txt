#!/usr/bin/env python

import rospy
import cv2
import cv2.aruco as aruco
import numpy as np
from sensor_msgs.msg import Image
from sensor_msgs.msg import CompressedImage
from geometry_msgs.msg import Twist, Vector3
from cv_bridge import CvBridge, CvBridgeError

#Sources:
#https://pyimagesearch.com/2020/12/21/detecting-aruco-markers-with-opencv-and-python/

class ArucoServoing:
    def __init__(self):
        self.aruco_dict = aruco.Dictionary_get(aruco.DICT_ARUCO_ORIGINAL)
        self.aruco_params = aruco.DetectorParameters_create()
        self.bridge = CvBridge()
        # self.point_coordinates = None
        # self.aruco_coordinates = None
        # self.image = cv2.imread("aruco.png")
        #Control variables
        self.kp = 0.1
        
        # Create subscribers
        self.compressed_flag = True
        rospy.Subscriber("/blue_rov1/CompressedImage", CompressedImage, self.image_callback)
        self.cmd_vel_publisher = rospy.Publisher("/cmd_vel", Twist, queue_size=10)
        # rospy.Subscriber("/camera0/image_raw", Image, self.image_callback)
        # (self.corners, self.ids, self.rejectedImgPoints) = aruco.detectMarkers(self.image, self.aruco_dict, parameters=self.aruco_params)

    def detect_marker(self, image):
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        aruco_dict = aruco.Dictionary_get(aruco.DICT_ARUCO_ORIGINAL)
        parameters = aruco.DetectorParameters_create()
        # print("parameters = {}".format(parameters))
        corners, ids, rejectedImgPoints = aruco.detectMarkers(gray, self.aruco_dict, parameters=parameters)
        print("corners = {}".format(corners))
        print("ids = {}".format(ids))
        # print("rejectedImgPoints = {}".format(rejectedImgPoints))
        frame_markers = aruco.drawDetectedMarkers(image, corners, ids)
        cv2.imshow("image", image)
        cv2.waitKey(3)
        cv2.imshow("frame_markers", frame_markers)
        cv2.waitKey(3)
        return frame_markers

    def image_callback(self, image_msg):
        # print(image_msg)
        #to convert the ROS Image message to a CV2 Image
        print("image_callback")
        if self.compressed_flag:
            try:
                np_arr = np.fromstring(image_msg.data, np.uint8)
                cv_image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
                # cv_image = self.bridge.imgmsg_to_cv2(image_msg, "passthrough")
                # cv2.imshow("Image", cv_image)
                # cv2.waitKey(3)
            except CvBridgeError as e:
                rospy.logerr("CvBridge Error: {0}".format(e))
        else:
            try:
                cv_image = self.bridge.imgmsg_to_cv2(image_msg, "passthrough")
                # cv2.imshow("Image", cv_image)
                # cv2.waitKey(3)
            except CvBridgeError as e:
                rospy.logerr("CvBridge Error: {0}".format(e))
        
        self.image_height = cv_image.shape[0]
        self.image_width = cv_image.shape[1]

        self.point_coordinates = (self.image_width/2, self.image_height/2)
        self.aruco_coordinates = self.detect_marker(cv_image)
        print('a7a')


    def visual_servoing(self):
        # if self.point_coordinates is not None:
        print("visual_servoing")
        # Calculate the center of the image
        # center = (self.width/2, self.height/2)
        # Calculate the error
        # error = (self.point_coordinate[0] - self.point_coordinate[0], self.point_coordinate[1] - self.point_coordinate[1])
        error_x = self.point_coordinates[0] - self.aruco_coordinates[0]
        error_y = self.point_coordinates[1] - self.aruco_coordinates[1]
        # Calculate the proportional gain
        # Calculate the proportional error
        vel_x = self.kp * error_x
        vel_y = self.kp * error_y
        # Calculate the velocity
        self.cmd_vel_pub.publish(Twist(Vector3(vel_x, 0, 0), Vector3(0, 0, vel_y)))
        print("vel_x = {}".format(vel_x))
        print("vel_y = {}".format(vel_y))
        # velocity = (proportional_error[0], proportional_error[1])
        # return velocity
        # else:
        #     print("No point coordinates")


# if __name__ == "__main__":
#     rospy.init_node("aruco_servoing")
#     aruco_servoing = ArucoServoing()
#     while not rospy.is_shutdown():
#         aruco_servoing.visual_servoing()
#         rospy.sleep(0.1)
#     rospy.spin()

if __name__ == "__main__":
    rospy.init_node("aruco_servoing")
    aruco_servoing = ArucoServoing()
    # aruco_servoing.visual_servoing()
    # rospy.sleep(0.1)
    
    # while not rospy.is_shutdown():
    #     aruco_servoing.visual_servoing()
    #     rospy.sleep(0.1)
    rospy.spin()
